#include <valarray>

int constexpr size = 1024 ;
int constexpr power = 100000 ;

static void Analyse1(benchmark::State& state) {

  std::valarray<double> datas(size) ;
  for ( double & data : datas )
   { data = std::rand()/(RAND_MAX+1.) ; }
 
  for (auto _ : state) {

    double res {0.} ;
    for ( double data : datas ) {
      double val = 1 ; 
      for ( int j=0 ; j<power ; ++j )
        val *= data ;
      res += val ;
    }
    benchmark::DoNotOptimize(res) ;

  }

}
BENCHMARK(Analyse1);

static void Analyse2(benchmark::State& state) {

  std::valarray<double> datas(size) ;
  for ( double & data : datas )
   { data = std::rand()/(RAND_MAX+1.) ; }

  for (auto _ : state) {

    double res {0.} ;
    std::valarray<double> vals(1.,datas.size()) ;
    for ( int j=0 ; j<power ; ++j )
     { vals *= datas ; }
    for ( double val : vals )
     { res += val ; }
    benchmark::DoNotOptimize(res);

  }
  
}
BENCHMARK(Analyse2);